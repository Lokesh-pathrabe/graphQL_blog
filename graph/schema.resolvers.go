package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.35

import (
	"context"
	"errors"
	"example/graph/model"
	"fmt"
	"strconv"
)

// CreatePerson is the resolver for the createPerson field.
func (r *mutationResolver) CreatePerson(ctx context.Context, name string, age int) (*model.Person, error) {
	res, err := r.db.Exec("INSERT INTO persons (name, age) VALUES (?, ?)", name, age)
	newPerson := &model.Person{
		Name: name,
		Age:  age,
	}
	go r.pubSub.PublishPerson(newPerson)
	if err != nil {
		return nil, err
	}
	personID, err := res.LastInsertId()
	if err != nil {
		return nil, err
	}
	return r.fetchPersonByID(int(personID))
}

// UpdatePerson is the resolver for the updatePerson field.
func (r *mutationResolver) UpdatePerson(ctx context.Context, id string, name string, age string) (*model.Person, error) {
	personID, err := strconv.Atoi(id)
	if err != nil {
		return nil, errors.New("invalid person ID")
	}
	_, err = r.db.Exec("UPDATE persons SET name=?, age=? WHERE id=?", name, age, personID)
	if err != nil {
		return nil, err
	}
	return r.fetchPersonByID(personID)
}

// DeletePerson is the resolver for the deletePerson field.
func (r *mutationResolver) DeletePerson(ctx context.Context, id string) (*model.Person, error) {
	personID, err := strconv.Atoi(id)
	if err != nil {
		return nil, errors.New("invalid person ID")
	}
	personToDelete, err := r.fetchPersonByID(personID)
	if err != nil {
		return nil, err
	}
	_, err = r.db.Exec("DELETE FROM persons WHERE id=?", personID)
	if err != nil {
		return nil, err
	}
	return personToDelete, nil
}

// CreatePost is the resolver for the createPost field.
func (r *mutationResolver) CreatePost(ctx context.Context, title string, authorID int) (*model.Post, error) {
	author, err := r.fetchPersonByID(authorID)
	if err != nil {
		return nil, fmt.Errorf("failed to find author with ID %d: %v", authorID, err)
	}
	res, err := r.db.Exec("INSERT INTO posts (title, author_id) VALUES (?, ?)", title, authorID)
	if err != nil {
		return nil, err
	}
	postID, err := res.LastInsertId()
	newPost := &model.Post{
		Title:  title,
		Author: author,
	}
	go r.pubSub.PublishPost(newPost)
	if err != nil {
		return nil, err
	}
	return r.fetchPostByID(int(postID))
}

// UpdatePost is the resolver for the updatePost field.
func (r *mutationResolver) UpdatePost(ctx context.Context, id string, title string) (*model.Post, error) {
	postID, err := strconv.Atoi(id)
	if err != nil {
		return nil, errors.New("invalid post ID")
	}
	_, err = r.db.Exec("UPDATE posts SET title=? WHERE id=?", title, postID)
	if err != nil {
		return nil, err
	}
	return r.fetchPostByID(postID)
}

// DeletePost is the resolver for the deletePost field.
func (r *mutationResolver) DeletePost(ctx context.Context, id string) (*model.Post, error) {
	postID, err := strconv.Atoi(id)
	if err != nil {
		return nil, errors.New("invalid post ID")
	}
	postToDelete, err := r.fetchPostByID(postID)
	if err != nil {
		return nil, err
	}
	_, err = r.db.Exec("DELETE FROM posts WHERE id=?", postID)
	if err != nil {
		return nil, err
	}
	return postToDelete, nil
}

// AllPersons is the resolver for the allPersons field.
func (r *queryResolver) AllPersons(ctx context.Context, last *int) ([]*model.Person, error) {
	var query string
	if last != nil {
		query = fmt.Sprintf("SELECT id ,name, age FROM persons ORDER BY id DESC LIMIT %d", *last)
	} else {
		query = "SELECT id, name, age FROM persons ORDER BY id DESC"
	}
	rows, err := r.db.Query(query)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	persons := []*model.Person{}
	for rows.Next() {
		var person model.Person
		if err := rows.Scan(&person.ID, &person.Name, &person.Age); err != nil {
			return nil, err
		}
		persons = append(persons, &person)
	}
	return persons, nil
}

// AllPosts is the resolver for the allPosts field.
func (r *queryResolver) AllPosts(ctx context.Context, last *int) ([]*model.Post, error) {
	var query string
	if last != nil {
		query = fmt.Sprintf("SELECT title, author_id FROM posts ORDER BY id DESC LIMIT %d", *last)
	} else {
		query = "SELECT title, author_id FROM posts ORDER BY id DESC"
	}
	rows, err := r.db.Query(query)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	posts := []*model.Post{}
	for rows.Next() {
		var post model.Post
		var authorID int
		if err := rows.Scan(&post.Title, &authorID); err != nil {
			return nil, err
		}
		post.Author, err = r.fetchPersonByID(authorID)
		if err != nil {
			return nil, err
		}
		posts = append(posts, &post)
	}
	return posts, nil
}

// PersonByID is the resolver for the personById field.
func (r *queryResolver) PersonByID(ctx context.Context, id string) ([]*model.Person, error) {
	query := "SELECT id,name, age FROM persons WHERE id=" + id // invalid
	rows, err := r.db.Query(query)                             // invalid
	// rows, err := r.db.Query("SELECT id,name, age FROM persons WHERE id=?", id) //valid
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	persons := []*model.Person{}
	for rows.Next() {
		var p model.Person
		err := rows.Scan(&p.ID, &p.Name, &p.Age)
		if err != nil {
			return nil, err
		}
		persons = append(persons, &p)
	}
	return persons, nil
}

// NewPerson is the resolver for the newPerson field.
func (r *subscriptionResolver) NewPerson(ctx context.Context) (<-chan *model.Person, error) {
	ch := r.pubSub.SubscribePerson()
	go func() {
		<-ctx.Done()
		r.pubSub.UnsubscribePerson(ch)
		fmt.Println("Subscription Closed")
	}()
	return ch, nil
	// select {
	// case <-ctx.Done():
	// 	r.pubSub.Unsubscribe(ch)
	// 	fmt.Println("Subscription Closed")
	// 	return nil, ctx.Err()
	// case <-ch:
	// 	return ch, nil
	// }
}

// NewPost is the resolver for the newPost field.
func (r *subscriptionResolver) NewPost(ctx context.Context) (<-chan *model.Post, error) {
	ch := r.pubSub.SubscribePost()
	go func() {
		<-ctx.Done()
		r.pubSub.UnsubscribePost(ch)
		fmt.Println("Subscription Closed")
	}()
	return ch, nil
	// panic(fmt.Errorf("not implemented: NewPost - newPost"))
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

// Subscription returns SubscriptionResolver implementation.
func (r *Resolver) Subscription() SubscriptionResolver { return &subscriptionResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
type subscriptionResolver struct{ *Resolver }

// !!! WARNING !!!
// The code below was going to be deleted when updating resolvers. It has been copied here so you have
// one last chance to move it out of harms way if you want. There are two reasons this happens:
//   - When renaming or deleting a resolver the old code will be put in here. You can safely delete
//     it when you're done.
//   - You have helper methods in this file. Move them out to keep these resolver files clean.
func (r *subscriptionResolver) UpdatedPerson(ctx context.Context) (<-chan *model.Person, error) {
	panic(fmt.Errorf("not implemented: UpdatedPerson - updatedPerson"))
}
func (r *subscriptionResolver) DeletedPerson(ctx context.Context) (<-chan *model.Person, error) {
	panic(fmt.Errorf("not implemented: DeletedPerson - deletedPerson"))
}
func (r *subscriptionResolver) UpdatedPost(ctx context.Context) (<-chan *model.Post, error) {
	panic(fmt.Errorf("not implemented: UpdatedPost - updatedPost"))
}
func (r *subscriptionResolver) DeletedPost(ctx context.Context) (<-chan *model.Post, error) {
	panic(fmt.Errorf("not implemented: DeletedPost - deletedPost"))
}
func (m *mutationResolver) fetchPersonByID(id int) (*model.Person, error) {
	var person model.Person
	err := m.db.QueryRow("SELECT name, age FROM persons WHERE id=?", id).Scan(&person.Name, &person.Age)
	if err != nil {
		return nil, err
	}
	return &person, nil
}
func (m *mutationResolver) fetchPostByID(id int) (*model.Post, error) {
	var post model.Post
	var authorID int
	err := m.db.QueryRow("SELECT title, author_id FROM posts WHERE id=?", id).Scan(&post.Title, &authorID)
	if err != nil {
		return nil, err
	}
	post.Author, err = m.fetchPersonByID(authorID)
	if err != nil {
		return nil, err
	}
	return &post, nil
}
func (q *queryResolver) fetchPersonByID(id int) (*model.Person, error) {
	var person model.Person
	err := q.db.QueryRow("SELECT name, age FROM persons WHERE id=?", id).Scan(&person.Name, &person.Age)
	if err != nil {
		return nil, err
	}
	person.ID = strconv.FormatInt(int64(id), 10)
	return &person, nil
}
