package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.35

import (
	"context"
	"example/graph/model"
	"fmt"
)

// CreatePerson is the resolver for the createPerson field.
func (r *mutationResolver) CreatePerson(ctx context.Context, name string, age int) (*model.Person, error) {
	res, err := r.db.Exec("INSERT INTO persons (name, age) VALUES (?, ?)", name, age)
	if err != nil {
		return nil, err
	}
	personID, err := res.LastInsertId()
	if err != nil {
		return nil, err
	}
	return r.fetchPersonByID(int(personID))
}

func (m *mutationResolver) fetchPersonByID(id int) (*model.Person, error) {
	var person model.Person
	err := m.db.QueryRow("SELECT name, age FROM persons WHERE id=?", id).Scan(&person.Name, &person.Age)
	if err != nil {
		return nil, err
	}
	return &person, nil
}

// AllPersons is the resolver for the allPersons field.
func (r *queryResolver) AllPersons(ctx context.Context, last *int) ([]*model.Person, error) {
	var query string
	if last != nil {
		query = fmt.Sprintf("SELECT name, age FROM persons ORDER BY id DESC LIMIT %d", *last)
	} else {
		query = "SELECT name, age FROM persons ORDER BY id DESC"
	}
	rows, err := r.db.Query(query)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	persons := []*model.Person{}
	for rows.Next() {
		var person model.Person
		if err := rows.Scan(&person.Name, &person.Age); err != nil {
			return nil, err
		}
		persons = append(persons, &person)
	}
	return persons, nil
}

// UpdatePerson is the resolver for the updatePerson field.
func (r *mutationResolver) UpdatePerson(ctx context.Context, id string, name string, age string) (*model.Person, error) {
	panic(fmt.Errorf("not implemented: UpdatePerson - updatePerson"))
}

// DeletePerson is the resolver for the deletePerson field.
func (r *mutationResolver) DeletePerson(ctx context.Context, id string) (*model.Person, error) {
	panic(fmt.Errorf("not implemented: DeletePerson - deletePerson"))
}

// CreatePost is the resolver for the createPost field.
func (r *mutationResolver) CreatePost(ctx context.Context, title string) (*model.Post, error) {
	panic(fmt.Errorf("not implemented: CreatePost - createPost"))
}

// UpdatePost is the resolver for the updatePost field.
func (r *mutationResolver) UpdatePost(ctx context.Context, id string, title string) (*model.Post, error) {
	panic(fmt.Errorf("not implemented: UpdatePost - updatePost"))
}

// DeletePost is the resolver for the deletePost field.
func (r *mutationResolver) DeletePost(ctx context.Context, id string) (*model.Post, error) {
	panic(fmt.Errorf("not implemented: DeletePost - deletePost"))
}

// AllPosts is the resolver for the allPosts field.
func (r *queryResolver) AllPosts(ctx context.Context, last *int) ([]*model.Post, error) {
	var query string
	if last != nil {
		query = fmt.Sprintf("SELECT title, author_id FROM posts ORDER BY id DESC LIMIT %d", *last)
	} else {
		query = "SELECT title, author_id FROM posts ORDER BY id DESC"
	}
	rows, err := r.db.Query(query)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	posts := []*model.Post{}
	for rows.Next() {
		var post model.Post
		var authorID int
		if err := rows.Scan(&post.Title, &authorID); err != nil {
			return nil, err
		}
		post.Author, err = r.fetchPersonByID(authorID)
		if err != nil {
			return nil, err
		}
		posts = append(posts, &post)
	}
	return posts, nil
}

func (q *queryResolver) fetchPersonByID(id int) (*model.Person, error) {
	var person model.Person
	err := q.db.QueryRow("SELECT name, age FROM persons WHERE id=?", id).Scan(&person.Name, &person.Age)
	if err != nil {
		return nil, err
	}
	return &person, nil
}

// NewPerson is the resolver for the newPerson field.
func (r *subscriptionResolver) NewPerson(ctx context.Context) (<-chan *model.Person, error) {
	panic(fmt.Errorf("not implemented: NewPerson - newPerson"))
}

// UpdatedPerson is the resolver for the updatedPerson field.
func (r *subscriptionResolver) UpdatedPerson(ctx context.Context) (<-chan *model.Person, error) {
	panic(fmt.Errorf("not implemented: UpdatedPerson - updatedPerson"))
}

// DeletedPerson is the resolver for the deletedPerson field.
func (r *subscriptionResolver) DeletedPerson(ctx context.Context) (<-chan *model.Person, error) {
	panic(fmt.Errorf("not implemented: DeletedPerson - deletedPerson"))
}

// NewPost is the resolver for the newPost field.
func (r *subscriptionResolver) NewPost(ctx context.Context) (<-chan *model.Post, error) {
	panic(fmt.Errorf("not implemented: NewPost - newPost"))
}

// UpdatedPost is the resolver for the updatedPost field.
func (r *subscriptionResolver) UpdatedPost(ctx context.Context) (<-chan *model.Post, error) {
	panic(fmt.Errorf("not implemented: UpdatedPost - updatedPost"))
}

// DeletedPost is the resolver for the deletedPost field.
func (r *subscriptionResolver) DeletedPost(ctx context.Context) (<-chan *model.Post, error) {
	panic(fmt.Errorf("not implemented: DeletedPost - deletedPost"))
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

// Subscription returns SubscriptionResolver implementation.
func (r *Resolver) Subscription() SubscriptionResolver { return &subscriptionResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
type subscriptionResolver struct{ *Resolver }
